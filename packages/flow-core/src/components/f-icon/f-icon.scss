@use "sass:map";
// common mixins imported from this file
@import "./../../mixins/scss/mixins";

/**
START : scss maps to hold repsective attribute values
**/
$sizes: (
  "x-small": 12px,
  "small": 16px,
  "medium": 20px,
  "large": 28px,
  "x-large": 36px,
);

$states: (
  "default": (
    "fill": var(--color-icon-default),
    "hover-fill": var(--color-icon-default-hover),
  ),
  "secondary": (
    "fill": var(--color-icon-secondary),
    "hover-fill": var(--color-icon-secondary-hover),
  ),
  "subtle": (
    "fill": var(--color-icon-subtle),
    "hover-fill": var(--color-icon-subtle-hover),
  ),
  "primary": (
    "fill": var(--color-primary-default),
    "hover-fill": var(--color-primary-default-hover),
  ),
  "success": (
    "fill": var(--color-success-default),
    "hover-fill": var(--color-success-default-hover),
  ),
  "danger": (
    "fill": var(--color-danger-default),
    "hover-fill": var(--color-danger-default-hover),
  ),
  "warning": (
    "fill": var(--color-warning-default),
    "hover-fill": var(--color-warning-default-hover),
  ),
  "neutral": (
    "fill": var(--color-neutral-default),
    "hover-fill": var(--color-neutral-default-hover),
  ),
);
/**
END : scss maps to hold repsective attribute values
**/

/**
:host selects the host element. 
in this case it is `f-icon`
**/
:host {
  display: inline-flex;
  vertical-align: top;

  // applying styles on inner elements
  div.f-icon {
    // Important :  always include base mixins
    @include base();
    display: inline-flex;
    align-items: center;
    justify-content: center;

    //fill-color different due to inherit state of the component to inherit color according to parent div state
    // For Success state
    &.inherit-success {
      svg {
        fill: var(--color-success-text);
        stroke: none;
        *[fill^="white"] {
          fill: var(--color-success-text);
        }
      }
      // adding clickable behavior
      &[clickable] {
        cursor: pointer;
        &:hover {
          svg {
            fill: var(--color-success-text-hover);
            stroke: none;
            *[fill^="white"] {
              fill: var(--color-success-text-hover);
            }
          }
        }
      }
    }

    //fill-color different due to inherit state of the component to inherit color according to parent div state
    // For warning state
    &.inherit-warning {
      svg {
        fill: var(--color-warning-text);
        stroke: none;
        *[fill^="white"] {
          fill: var(--color-warning-text);
        }
      }
      // adding clickable behavior
      &[clickable] {
        cursor: pointer;
        &:hover {
          svg {
            fill: var(--color-warning-text-hover);
            stroke: none;
            *[fill^="white"] {
              fill: var(--color-warning-text-hover);
            }
          }
        }
      }
    }

    //fill-color different due to inherit state of the component to inherit color according to parent div state
    // For danger state
    &.inherit-danger {
      svg {
        fill: var(--color-danger-text);
        stroke: none;
        *[fill^="white"] {
          fill: var(--color-danger-text);
        }
      }
      // adding clickable behavior
      &[clickable] {
        cursor: pointer;
        &:hover {
          svg {
            fill: var(--color-danger-text-hover);
            stroke: none;
            *[fill^="white"] {
              fill: var(--color-danger-text-hover);
            }
          }
        }
      }
    }

    //fill-color different due to inherit state of the component to inherit color according to parent div state
    // For primary state
    &.inherit-primary {
      svg {
        fill: var(--color-primary-text);
        stroke: none;
        *[fill^="white"] {
          fill: var(--color-primary-text);
        }
      }
      // adding clickable behavior
      &[clickable] {
        cursor: pointer;
        &:hover {
          svg {
            fill: var(--color-primary-text-hover);
            stroke: none;
            *[fill^="white"] {
              fill: var(--color-primary-text-hover);
            }
          }
        }
      }
    }

    // iterating over states and applying css
    @each $state, $value in $states {
      &[state="#{$state}"] {
        svg {
          fill: map.get($value, "fill");
          stroke: none;
          *[fill^="white"] {
            fill: map.get($value, "fill");
          }
        }
        // adding clickable behavior
        &[clickable] {
          cursor: pointer;
          &:hover {
            svg {
              fill: map.get($value, "hover-fill");
              stroke: none;
              *[fill^="white"] {
                fill: map.get($value, "hover-fill");
              }
            }
          }
        }
      }
    }
    // Edge case : extend styles if `f-icon` is used on `f-button`
    &.fill-button-surface {
      svg {
        fill: var(--color-surface-default) !important;
        stroke: none;
        *[fill^="white"] {
          fill: var(--color-surface-default) !important;
        }
      }

      &:hover {
        svg {
          fill: var(--color-surface-default-hover);
          stroke: none;
          *[fill^="white"] {
            fill: var(--color-surface-default-hover);
          }
        }
      }
    }

    /**
  * Iterating over sizes with padding, fontsize, height
  **/
    @each $size, $value in $sizes {
      &[size="#{$size}"] {
        font-size: $value;
        line-height: $value;
        width: $value;
        height: $value;
        svg,
        img {
          width: $value;
          height: $value;
        }
        &.f-pictogram-small {
          width: 8px;
          height: 8px;
          svg,
          img {
            width: 8px;
            height: 8px;
          }
        }
        &.f-pictogram-x-large-emoji {
          font-size: 18px;
          line-height: 18px;
          width: 18px;
          height: 18px;
        }
        &.f-pictogram-large-emoji {
          font-size: 16px;
          line-height: 16px;
          width: 16px;
          height: 16px;
        }
        &.f-pictogram-medium-emoji {
          font-size: 14px;
          line-height: 14px;
          width: 14px;
          height: 14px;
        }
        &.f-pictogram-small-emoji {
          font-size: 10px;
          line-height: 10px;
          width: 10px;
          height: 10px;
        }
      }
    }
    // applying disabled mixins
    &[disabled] {
      @include disabled();
    }

    // applying loading mixins
    &[loading] {
      @include rotate("svg");
    }

    &:focus {
      outline: var(--color-highlight-default) solid 2px;
    }
  }
}
