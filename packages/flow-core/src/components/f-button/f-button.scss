@use "sass:map";
@use "sass:math";
@import "./../../mixins/scss/mixins";

$states: (
  "primary": (
    "background": var(--color-primary-default),
    "hover": var(--color-primary-default-hover),
  ),
  "neutral": (
    "background": var(--color-neutral-default),
    "hover": var(--color-neutral-default-hover),
  ),
  "success": (
    "background": var(--color-success-default),
    "hover": var(--color-success-default-hover),
  ),
  "warning": (
    "background": var(--color-warning-default),
    "hover": var(--color-warning-default-hover),
  ),
  "danger": (
    "background": var(--color-danger-default),
    "hover": var(--color-danger-default-hover),
  ),
);

$sizes: (
  "x-small": (
    "height": 20px,
    "padding": 0px 8px,
    "fontSize": 10px,
    "gap": 4px,
    "loaderSize": 12px,
  ),
  "small": (
    "height": 28px,
    "padding": 0px 12px,
    "fontSize": 12px,
    "gap": 8px,
    "loaderSize": 16px,
  ),
  "medium": (
    "height": 36px,
    "padding": 0px 16px,
    "fontSize": 14px,
    "gap": 12px,
    "loaderSize": 20px,
  ),
  "large": (
    "height": 44px,
    "padding": 0px 20px,
    "fontSize": 16px,
    "gap": 16px,
    "loaderSize": 24px,
  ),
);

f-button {
  @include base();
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  text-transform: uppercase;
  color: var(--color-surface-default);
  flex: 0 0 auto;
  vertical-align: top;
  /**
  * Iterating over states with variants
  **/
  &[type="fill"] {
    f-counter {
      background-color: var(--color-surface-default);
      color: var(--color-text-default);
    }
    f-icon {
      svg {
        fill: var(--color-surface-default);
        stroke: none;
        *[fill^="white"] {
          fill: var(--color-surface-default);
        }
      }
    }
  }
  @each $state, $color in $states {
    &[state="#{$state}"][type="fill"] {
      background-color: map.get($color, "background");
      border: 1px
        solid
        map.get($color, "background"); // added to match width of outline type
      &:hover {
        background-color: map.get($color, "hover");
      }
      &[loading] {
        background-color: var(--color-primary-surface);
        border: 1px solid var(--color-primary-surface);
        color: transparent;
      }
    }

    &[state="#{$state}"][type="outline"] {
      background-color: transparent;
      border: 1px solid map.get($color, "background");
      color: map.get($color, "background");
      &:hover {
        border: 1px solid map.get($color, "hover");
        color: map.get($color, "hover");
        f-counter {
          background-color: map.get($color, "hover");
        }

        f-icon {
          svg {
            fill: map.get($color, "hover");
            stroke: none;
            *[fill^="white"] {
              fill: map.get($color, "hover");
            }
          }
        }
      }
      f-counter {
        background-color: map.get($color, "background");
      }
      f-icon {
        svg {
          fill: map.get($color, "background");
          stroke: none;
          *[fill^="white"] {
            fill: map.get($color, "background");
          }
        }
      }
      &[loading] {
        border: 1px solid var(--color-primary-surface);
        color: transparent;
      }
    }

    &[state="#{$state}"][type="transparent"] {
      background-color: transparent;
      border: 1px solid transparent;
      color: map.get($color, "background");
      &:hover {
        border: 1px solid transparent;
        color: map.get($color, "hover");
        f-counter {
          background-color: map.get($color, "hover");
        }
        f-icon {
          svg {
            fill: map.get($color, "hover");
            stroke: none;
            *[fill^="white"] {
              fill: map.get($color, "hover");
            }
          }
        }
      }
      f-counter {
        background-color: map.get($color, "background");
      }
      f-icon {
        svg {
          fill: map.get($color, "background");
          stroke: none;
          *[fill^="white"] {
            fill: map.get($color, "background");
          }
        }
      }
      &[loading] {
        color: transparent;
      }
    }
  }

  /**
  * Iterating over sizes with padding, fontsize, height
  **/
  @each $size, $value in $sizes {
    &[size="#{$size}"] {
      height: map.get($value, "height");
      padding: map.get($value, "padding");
      font-size: map.get($value, "fontSize");
      &[variant="round"] {
        border-radius: math.div(map.get($value, "height"), 2);
      }

      f-counter {
        margin-left: map.get($value, "gap");
      }

      .left-icon {
        margin-right: map.get($value, "gap");
      }
      .right-icon {
        margin-left: map.get($value, "gap");
      }

      &[loading] {
        svg {
          height: map.get($value, "loaderSize");
        }
      }
    }
  }

  &[variant="curved"] {
    border-radius: 4px;
  }

  &[variant="block"] {
    display: flex;
  }

  &[disabled] {
    @include disabled();
  }

  &[loading] {
    @include rotate("svg");
    pointer-events: none;

    svg {
      position: absolute;
    }
  }
}
