@use "sass:map";
// common mixins imported from this file
@import "./../../mixins/scss/mixins";

/**
$variants map will have state specific inner maps.
**/
$variants: (
  "curved-fill": (
    "background": var(--color-surface-tertiary),
    "hover": var(--color-surface-tertiary-hover),
  ),
  "round-fill": (
    "background": var(--color-surface-tertiary),
    "hover": var(--color-surface-tertiary-hover),
  ),
  "transparent": (
    "background": transparent,
    "hover": var(--color-surface-default-hover),
  ),
  "outline": (
    "background": transparent,
    "hover": var(--color-surface-default-hover),
  ),
);

$sizes: (
  "medium": (
    "main-height": 36px,
    "height": 34px,
    "loader": 24px,
  ),
  "small": (
    "main-height": 26px,
    "height": 26px,
    "loader": 16px,
  ),
);

$states: (
  "primary": (
    "input": var(--color-primary-default),
    "border": var(--color-primary-default),
    "focus": var(--color-primary-default),
  ),
  "default": (
    "input": var(--color-surface-tertiary),
    "border": var(--color-border-default),
    "focus": var(--color-primary-default),
  ),
  "success": (
    "input": var(--color-success-default),
    "border": var(--color-success-default),
    "focus": var(--color-success-default),
  ),
  "warning": (
    "input": var(--color-warning-default),
    "border": var(--color-warning-default),
    "focus": var(--color-warning-default),
  ),
  "danger": (
    "input": var(--color-danger-default),
    "border": var(--color-danger-default),
    "focus": var(--color-danger-default),
  ),
  "inherit": (
    "input": var(--color-input-default),
    "border": var(--color-input-border-default),
    "focus": var(--color-input-focus),
  ),
);

/**
applies styles on f-div
**/

:host {
  .input-icons {
    // Important :  always include base mixins
    @include base();
    width: 100%;
    display: flex;
    align-items: center;
    position: relative;
    height: var(--form-input-div-size);

    @each $size, $value in $sizes {
      &[size="#{$size}"] {
        height: map.get($value, "main-height");
      }
    }

    .word-break {
      word-break: normal !important;
    }

    @each $variant, $value in $variants {
      &[variant^="#{$variant}"] {
        background-color: map.get($value, "background");
        &:hover {
          background-color: map.get($value, "hover") !important;
        }
      }
    }
    @each $state, $color in $states {
      &[state="#{$state}"] {
        &[variant="transparent"] {
          border-bottom: 1px solid map.get($color, "border");
          border-top: none;
          border-right: none;
          border-left: none;
          &:focus-within {
            border-bottom: 1px solid map.get($color, "focus");
            outline: none;
          }
        }
        &[variant="outline"] {
          border: 1px solid map.get($color, "border");
          border-radius: 4px;
          &:focus-within {
            border: 1px solid map.get($color, "focus");
            outline: none;
          }
        }
        &[variant="round-fill"] {
          border-radius: 22px;
          border: 1px solid map.get($color, "input");
          &:focus-within {
            border: 1px solid map.get($color, "focus");
            outline: none;
          }
        }
        &[variant="curved-fill"] {
          border-radius: 4px;
          border: 1px solid map.get($color, "input");
          &:focus-within {
            border: 1px solid map.get($color, "focus");
            outline: none;
          }
        }
      }
    }
    .prefix {
      position: relative;
      display: flex;
      padding: 9px 0px 9px 12px;
      gap: 12px;
      align-items: center;
    }

    .suffix {
      position: relative;
      padding: 9px 12px 9px 0px;
      display: flex;
      gap: 12px;
      align-items: center;
    }

    .loader-suffix {
      position: relative;
      display: flex;
      gap: 12px;
      align-items: center;
      @include rotate("svg");
      pointer-events: none;
      padding: 0px 12px 0px 0px;

      svg {
        position: relative;
        height: var(--form-input-loader);
        width: var(--form-input-loader);
      }
    }

    @each $size, $value in $sizes {
      &[size="#{$size}"] {
        .loader-suffix {
          svg {
            height: map.get($value, "loader");
            width: map.get($value, "loader");
          }
        }
      }
    }

    .f-input {
      display: flex;
      flex: 1 1 auto;
      width: 100%;
      padding: 0px 12px;
      height: var(--form-input-size);
      @each $size, $value in $sizes {
        &[size="#{$size}"] {
          height: map.get($value, "height");
        }
      }
      font-style: normal;
      font-weight: 325;
      font-size: 12px;
      line-height: 18px;
      color: var(--color-text-default);
      color-scheme: dark;

      @each $variant, $value in $variants {
        &[variant^="#{$variant}"] {
          background-color: map.get($value, "background");
          &:hover {
            background-color: map.get($value, "hover") !important;
          }
          border: none;
          &:focus {
            outline: none;
          }
        }
      }
      &[variant="outline"] {
        border-radius: 4px;
      }
      &[variant="round-fill"] {
        border-radius: 22px;
      }
      &[variant="curved-fill"] {
        border-radius: 4px;
      }
      &[type="password"] {
        font-size: 15px;
        letter-spacing: 2px;
      }
      &::placeholder {
        /* Chrome, Firefox, Opera, Safari 10.1+ */
        font-style: normal;
        font-weight: 325;
        font-size: 12px;
        line-height: 18px;
        color: var(--color-text-subtle);
      }
      /* Chrome, Safari, Edge, Opera */
      &::-webkit-outer-spin-button,
      &::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
      /* Firefox */
      &[type="number"] {
        -moz-appearance: textfield;
      }
      &[type="date"]::-webkit-calendar-picker-indicator {
        cursor: pointer;
        border-radius: 4px;
        margin-right: 2px;
        opacity: 0.6;
        font-size: 15px;
      }

      &[type="date"]::-webkit-calendar-picker-indicator:hover {
        opacity: 1;
      }
    }
  }
}
